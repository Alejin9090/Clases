import network
import espnow
import machine
import time

# A WLAN interface must be active to send()/recv()
sta = network.WLAN(network.STA_IF)  # Or network.AP_IF
sta.active(True)
sta.disconnect()  # For ESP8266, if applicable

# Initialize ESP-NOW
esp = espnow.ESPNow()
esp.active(True)

# Define the MAC address of the receiving ESP32 (replace with your actual MAC address)
peer = b'x!\x84\xc6\x8b\xb0'  # Esta es la dirección MAC del receptor, actualízala
esp.add_peer(peer)

# Set up a button (pin 23)
button_pin = machine.Pin(23, machine.Pin.IN, machine.Pin.PULL_UP)

# Initialize variables for debouncing
last_button_state = 1  # Assuming the button is not pressed initially
debounce_delay = 50  # Adjust this value to your needs (milliseconds)

while True:
    # Read the current state of the button
    current_button_state = button_pin.value()

    # Check if the button state has changed
    if current_button_state != last_button_state:
        # Wait for a short time to debounce the button
        time.sleep_ms(debounce_delay)

        # Read the button state again to make sure it's stable
        current_button_state = button_pin.value()

        # If the button state is still different, it's a valid press
        if current_button_state != last_button_state:
            if current_button_state == 0:
                message = b'ledOn'
                print("Enviando: ledOn")  # Debug: Print the message sent
                esp.send(peer, message)
            else:
                message = b'ledOff'
                print("Enviando: ledOff")  # Debug: Print the message sent
                esp.send(peer, message)

        # Update the last button state
        last_button_state = current_button_state
    
    # Optional: Add a small delay to prevent 100% CPU usage
    time.sleep(0.1)
